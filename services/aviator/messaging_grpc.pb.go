// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: messaging.proto

package grandaviator

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Aviator_PlaneCashout_FullMethodName    = "/Aviator/PlaneCashout"
	Aviator_PlacePlaneBet_FullMethodName   = "/Aviator/PlacePlaneBet"
	Aviator_CancelPlaneBet_FullMethodName  = "/Aviator/CancelPlaneBet"
	Aviator_GetPlaneBets_FullMethodName    = "/Aviator/GetPlaneBets"
	Aviator_GetPlaneHistory_FullMethodName = "/Aviator/GetPlaneHistory"
)

// AviatorClient is the client API for Aviator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AviatorClient interface {
	PlaneCashout(ctx context.Context, in *PlaneBet, opts ...grpc.CallOption) (*PlaneCashoutResponse, error)
	PlacePlaneBet(ctx context.Context, in *PlaneBet, opts ...grpc.CallOption) (*PlacePlaneBetResponse, error)
	CancelPlaneBet(ctx context.Context, in *PlaneBet, opts ...grpc.CallOption) (*CancelPlaneBetResponse, error)
	GetPlaneBets(ctx context.Context, in *GetPlaneBetsRequest, opts ...grpc.CallOption) (*GetPlaneBetsResponse, error)
	GetPlaneHistory(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPlaneHistoryResponse, error)
}

type aviatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAviatorClient(cc grpc.ClientConnInterface) AviatorClient {
	return &aviatorClient{cc}
}

func (c *aviatorClient) PlaneCashout(ctx context.Context, in *PlaneBet, opts ...grpc.CallOption) (*PlaneCashoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaneCashoutResponse)
	err := c.cc.Invoke(ctx, Aviator_PlaneCashout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviatorClient) PlacePlaneBet(ctx context.Context, in *PlaneBet, opts ...grpc.CallOption) (*PlacePlaneBetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlacePlaneBetResponse)
	err := c.cc.Invoke(ctx, Aviator_PlacePlaneBet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviatorClient) CancelPlaneBet(ctx context.Context, in *PlaneBet, opts ...grpc.CallOption) (*CancelPlaneBetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelPlaneBetResponse)
	err := c.cc.Invoke(ctx, Aviator_CancelPlaneBet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviatorClient) GetPlaneBets(ctx context.Context, in *GetPlaneBetsRequest, opts ...grpc.CallOption) (*GetPlaneBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlaneBetsResponse)
	err := c.cc.Invoke(ctx, Aviator_GetPlaneBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aviatorClient) GetPlaneHistory(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPlaneHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlaneHistoryResponse)
	err := c.cc.Invoke(ctx, Aviator_GetPlaneHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AviatorServer is the server API for Aviator service.
// All implementations should embed UnimplementedAviatorServer
// for forward compatibility.
type AviatorServer interface {
	PlaneCashout(context.Context, *PlaneBet) (*PlaneCashoutResponse, error)
	PlacePlaneBet(context.Context, *PlaneBet) (*PlacePlaneBetResponse, error)
	CancelPlaneBet(context.Context, *PlaneBet) (*CancelPlaneBetResponse, error)
	GetPlaneBets(context.Context, *GetPlaneBetsRequest) (*GetPlaneBetsResponse, error)
	GetPlaneHistory(context.Context, *empty.Empty) (*GetPlaneHistoryResponse, error)
}

// UnimplementedAviatorServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAviatorServer struct{}

func (UnimplementedAviatorServer) PlaneCashout(context.Context, *PlaneBet) (*PlaneCashoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaneCashout not implemented")
}
func (UnimplementedAviatorServer) PlacePlaneBet(context.Context, *PlaneBet) (*PlacePlaneBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlacePlaneBet not implemented")
}
func (UnimplementedAviatorServer) CancelPlaneBet(context.Context, *PlaneBet) (*CancelPlaneBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPlaneBet not implemented")
}
func (UnimplementedAviatorServer) GetPlaneBets(context.Context, *GetPlaneBetsRequest) (*GetPlaneBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaneBets not implemented")
}
func (UnimplementedAviatorServer) GetPlaneHistory(context.Context, *empty.Empty) (*GetPlaneHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaneHistory not implemented")
}
func (UnimplementedAviatorServer) testEmbeddedByValue() {}

// UnsafeAviatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AviatorServer will
// result in compilation errors.
type UnsafeAviatorServer interface {
	mustEmbedUnimplementedAviatorServer()
}

func RegisterAviatorServer(s grpc.ServiceRegistrar, srv AviatorServer) {
	// If the following call pancis, it indicates UnimplementedAviatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Aviator_ServiceDesc, srv)
}

func _Aviator_PlaneCashout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaneBet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).PlaneCashout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aviator_PlaneCashout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).PlaneCashout(ctx, req.(*PlaneBet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviator_PlacePlaneBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaneBet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).PlacePlaneBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aviator_PlacePlaneBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).PlacePlaneBet(ctx, req.(*PlaneBet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviator_CancelPlaneBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaneBet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).CancelPlaneBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aviator_CancelPlaneBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).CancelPlaneBet(ctx, req.(*PlaneBet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviator_GetPlaneBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaneBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).GetPlaneBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aviator_GetPlaneBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).GetPlaneBets(ctx, req.(*GetPlaneBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aviator_GetPlaneHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AviatorServer).GetPlaneHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aviator_GetPlaneHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AviatorServer).GetPlaneHistory(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Aviator_ServiceDesc is the grpc.ServiceDesc for Aviator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aviator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Aviator",
	HandlerType: (*AviatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaneCashout",
			Handler:    _Aviator_PlaneCashout_Handler,
		},
		{
			MethodName: "PlacePlaneBet",
			Handler:    _Aviator_PlacePlaneBet_Handler,
		},
		{
			MethodName: "CancelPlaneBet",
			Handler:    _Aviator_CancelPlaneBet_Handler,
		},
		{
			MethodName: "GetPlaneBets",
			Handler:    _Aviator_GetPlaneBets_Handler,
		},
		{
			MethodName: "GetPlaneHistory",
			Handler:    _Aviator_GetPlaneHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messaging.proto",
}
